// Generated by gencpp from file rfid/rfid_msg.msg
// DO NOT EDIT!


#ifndef RFID_MESSAGE_RFID_MSG_H
#define RFID_MESSAGE_RFID_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfid
{
template <class ContainerAllocator>
struct rfid_msg_
{
  typedef rfid_msg_<ContainerAllocator> Type;

  rfid_msg_()
    : epc()
    , time(0)
    , idx(0)
    , mode(0)
    , ant(0)
    , phase(0.0)
    , rssi(0.0)  {
    }
  rfid_msg_(const ContainerAllocator& _alloc)
    : epc(_alloc)
    , time(0)
    , idx(0)
    , mode(0)
    , ant(0)
    , phase(0.0)
    , rssi(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _epc_type;
  _epc_type epc;

   typedef uint64_t _time_type;
  _time_type time;

   typedef uint32_t _idx_type;
  _idx_type idx;

   typedef uint32_t _mode_type;
  _mode_type mode;

   typedef uint32_t _ant_type;
  _ant_type ant;

   typedef double _phase_type;
  _phase_type phase;

   typedef double _rssi_type;
  _rssi_type rssi;





  typedef boost::shared_ptr< ::rfid::rfid_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfid::rfid_msg_<ContainerAllocator> const> ConstPtr;

}; // struct rfid_msg_

typedef ::rfid::rfid_msg_<std::allocator<void> > rfid_msg;

typedef boost::shared_ptr< ::rfid::rfid_msg > rfid_msgPtr;
typedef boost::shared_ptr< ::rfid::rfid_msg const> rfid_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfid::rfid_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfid::rfid_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rfid::rfid_msg_<ContainerAllocator1> & lhs, const ::rfid::rfid_msg_<ContainerAllocator2> & rhs)
{
  return lhs.epc == rhs.epc &&
    lhs.time == rhs.time &&
    lhs.idx == rhs.idx &&
    lhs.mode == rhs.mode &&
    lhs.ant == rhs.ant &&
    lhs.phase == rhs.phase &&
    lhs.rssi == rhs.rssi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rfid::rfid_msg_<ContainerAllocator1> & lhs, const ::rfid::rfid_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rfid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rfid::rfid_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid::rfid_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid::rfid_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid::rfid_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid::rfid_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid::rfid_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfid::rfid_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf1537cfb7f4c40935cda99446e77f70";
  }

  static const char* value(const ::rfid::rfid_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf1537cfb7f4c409ULL;
  static const uint64_t static_value2 = 0x35cda99446e77f70ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfid::rfid_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfid/rfid_msg";
  }

  static const char* value(const ::rfid::rfid_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfid::rfid_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string epc\n"
"uint64 time\n"
"uint32 idx\n"
"uint32 mode\n"
"uint32 ant\n"
"float64 phase\n"
"float64 rssi\n"
;
  }

  static const char* value(const ::rfid::rfid_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfid::rfid_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.epc);
      stream.next(m.time);
      stream.next(m.idx);
      stream.next(m.mode);
      stream.next(m.ant);
      stream.next(m.phase);
      stream.next(m.rssi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rfid_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfid::rfid_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfid::rfid_msg_<ContainerAllocator>& v)
  {
    s << indent << "epc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.epc);
    s << indent << "time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time);
    s << indent << "idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idx);
    s << indent << "mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "ant: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ant);
    s << indent << "phase: ";
    Printer<double>::stream(s, indent + "  ", v.phase);
    s << indent << "rssi: ";
    Printer<double>::stream(s, indent + "  ", v.rssi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFID_MESSAGE_RFID_MSG_H
